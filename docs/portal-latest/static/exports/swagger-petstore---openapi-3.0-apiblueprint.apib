FORMAT: 1A
HOST: https://petstore3.swagger.io/api/v3

# Swagger Petstore - OpenAPI 3.0
This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

_If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)

## Authentication
This API uses Custom Header for its authentication.

The parameters that are needed to be sent for this type of authentication are as follows:
+ `api_key`

# Group pet

Everything about your Pets

## Pet [/pet]

### updatePet [PUT]
Update an existing pet by Id
+ Attributes
    + name (string, required)

        + Sample: doggie
    + photoUrls (array[string], required)

    + id (number, optional)

        + Sample: 10
    + category (Category, optional)

    + tags (array[Tag], optional)

    + petStatus (enum[string], optional)

        pet status in the store

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




+ Response 405 

        Validation exception




### addPet [POST]
Add a new pet to the store
+ Attributes
    + name (string, required)

        + Sample: doggie
    + photoUrls (array[string], required)

    + id (number, optional)

        + Sample: 10
    + category (Category, optional)

    + tags (array[Tag], optional)

    + petStatus (enum[string], optional)

        pet status in the store

        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        Successful operation

    + Attributes (Pet)



+ Response 405 

        Invalid input





## Pet FindByStatus [/pet/findByStatus{?status}]

### findPetsByStatus [GET]
Multiple status values can be provided with comma separated strings
+ Parameters
    + status (enum[string], optional)

        Status values that need to be considered for filter

        + Default: available
        + Sample: available
        + Members
            + `available` 
            + `pending` 
            + `sold` 


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid status value





## Pet FindByTags [/pet/findByTags{?tags}]

### findPetsByTags [GET]
Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
+ Parameters
    + tags (array[string], optional)

        Tags to filter by


+ Response 200 (application/json)

        successful operation

    + Attributes (array[Pet])



+ Response 400 

        Invalid tag value





## Pet By PetId [/pet/{petId}]

+ Parameters
    + petId (number, required)

        ID of pet to return


### getPetById [GET]
Returns a single pet

+ Response 200 (application/json)

        successful operation

    + Attributes (Pet)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Pet not found




### deletePet [DELETE]
delete a pet

+ Request 
    + Headers

            api_key:<<Add Header Value>>





+ Response 400 

        Invalid pet value





## Pet By PetId [/pet/{petId}{?name,status}]

+ Parameters
    + petId (number, required)

        ID of pet that needs to be updated


### updatePetWithForm [POST]
Updates a pet in the store with form data
+ Parameters
    + name (string, optional)

        Name of pet that needs to be updated

    + status (string, optional)

        Status of pet that needs to be updated


+ Response 405 

        Invalid input





## Pet UploadImage By PetId [/pet/{petId}/uploadImage{?additionalMetadata}]

+ Parameters
    + petId (number, required)

        ID of pet to update


### uploadFile [POST]
uploads an image
+ Parameters
    + additionalMetadata (string, optional)

        Additional Metadata

+ Attributes
    + body (string, optional)


+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        successful operation

    + Attributes (PetImage)





# Group store

Access to Petstore orders

## Store Inventory [/store/inventory]

### getInventory [GET]
Returns a map of status codes to quantities

+ Response 200 (application/json)

        successful operation

    + Attributes (number)




## Store Order [/store/order]

### placeOrder [POST]
Place a new order in the store
+ Attributes
    + id (number, optional)

        + Sample: 10
    + petId (number, optional)

        + Sample: 198772
    + quantity (number, optional)

        + Sample: 7
    + shipDate (string, optional)

        + Sample: 2023-05-31T00:00:00Z
    + orderStatus (enum[string], optional)

        Order Status

        + Default: approved
        + Sample: approved
        + Members
            + `placed` 
            + `approved` 
            + `delivered` 

    + complete (boolean, optional)

        + Sample: true

+ Request (application/x-www-form-urlencoded)




+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 405 

        Invalid input





## Store Order By OrderId [/store/order/{orderId}]

+ Parameters
    + orderId (number, required)

        ID of order that needs to be fetched


### getOrderById [GET]
For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.

+ Response 200 (application/json)

        successful operation

    + Attributes (Order)



+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found




### deleteOrder [DELETE]
For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors

+ Response 400 

        Invalid ID supplied




+ Response 404 

        Order not found






# Group user

Operations about user

## User [/user]

### createUser [POST]
This can only be done by the logged in user.
+ Attributes
    + id (number, optional)

        + Sample: 10
    + username (string, optional)

        + Sample: theUser
    + firstName (string, optional)

        + Sample: John
    + lastName (string, optional)

        + Sample: James
    + email (string, optional)

        + Sample: john@email.com
    + password (string, optional)

        + Sample: 12345
    + phone (string, optional)

        + Sample: 12345
    + userStatus (number, optional)

        User Status

        + Sample: 1

+ Request (<<Add Header Value>>)




+ Response 200 (application/json)

        successful operation

    + Attributes (User)




## User CreateWithList [/user/createWithList]

### createUsersWithListInput [POST]
Creates list of users with given input array

+ Request (application/json)

    + Attributes (array[User])



+ Response 200 (application/json)

        Successful operation

    + Attributes (User)




## User Login [/user/login{?username,password}]

### loginUser [GET]
Logs user into the system
+ Parameters
    + username (string, optional)

        The user name for login

    + password (string, optional)

        The password for login in clear text


+ Response 200 (application/json)

        successful operation

    + Attributes (string)



+ Response 400 

        Invalid username/password supplied





## User Logout [/user/logout]

### logoutUser [GET]
Logs out current logged in user session

+ Response 200 

        successful operation





## User By Name [/user/{name}]

+ Parameters
    + name (string, required)

        The name that needs to be fetched. Use user1 for testing.


### getUserByName [GET]
Get user by user name

+ Response 200 (application/json)

        successful operation

    + Attributes (User)



+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found




### updateUser [PUT]
This can only be done by the logged in user.
+ Attributes
    + id (number, optional)

        + Sample: 10
    + username (string, optional)

        + Sample: theUser
    + firstName (string, optional)

        + Sample: John
    + lastName (string, optional)

        + Sample: James
    + email (string, optional)

        + Sample: john@email.com
    + password (string, optional)

        + Sample: 12345
    + phone (string, optional)

        + Sample: 12345
    + userStatus (number, optional)

        User Status

        + Sample: 1

+ Request (<<Add Header Value>>)




+ Response 200 

        successful operation




### deleteUser [DELETE]
This can only be done by the logged in user.

+ Response 400 

        Invalid username supplied




+ Response 404 

        User not found






# Data Structures

## Order (object)


### Properties
+ `id`: `10` (number, optional) 
+ `petId`: `198772` (number, optional) 
+ `quantity`: `7` (number, optional) 
+ `shipDate`: `2023-05-31T00:00:00Z` (string, optional) 
+ `orderStatus` (enum[string], optional) - Order Status
    + `placed`
    + `approved`
    + `delivered`
+ `complete`: `true` (boolean, optional) 


## Customer (object)


### Properties
+ `id`: `100000` (number, optional) 
+ `username`: `fehguy` (string, optional) 
+ `address` (array[Address], optional) 


## Address (object)


### Properties
+ `street`: `437 Lytton` (string, optional) 
+ `city`: `Palo Alto` (string, optional) 
+ `state`: `CA` (string, optional) 
+ `zip`: `94301` (string, optional) 


## Category (object)


### Properties
+ `id`: `1` (number, optional) 
+ `name`: `Dogs` (string, optional) 


## User (object)


### Properties
+ `id`: `10` (number, optional) 
+ `username`: `theUser` (string, optional) 
+ `firstName`: `John` (string, optional) 
+ `lastName`: `James` (string, optional) 
+ `email`: `john@email.com` (string, optional) 
+ `password`: `12345` (string, optional) 
+ `phone`: `12345` (string, optional) 
+ `userStatus`: `1` (number, optional) - User Status


## Tag (object)


### Properties
+ `id` (number, optional) 
+ `name` (string, optional) 


## Pet (object)


### Properties
+ `name`: `doggie` (string, required) 
+ `photoUrls` (array[string], required) 
+ `id`: `10` (number, optional) 
+ `category` (Category, optional) 
+ `tags` (array[Tag], optional) 
+ `petStatus` (enum[string], optional) - pet status in the store
    + `available`
    + `pending`
    + `sold`


## PetImage (object)


### Properties
+ `code` (number, optional) 
+ `type` (string, optional) 
+ `message` (string, optional) 

