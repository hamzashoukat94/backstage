#%RAML 0.8
title: Swagger Petstore - OpenAPI 3.0
version: 1.0.11
documentation:
- title: Swagger Petstore - OpenAPI 3.0
  content: |
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.


    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_


    Some useful links:

    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)

    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
baseUri: https://petstore3.swagger.io/api/v3
securedBy: []
protocols:
- HTTPS
baseUriParameters: {}
schemas:
- Order: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Order",
      "title": "Order",
      "type": "object",
      "properties": {
        "id": {
          "example": 10,
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "example": 198772,
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "example": 7,
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "example": "2023-05-31T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "orderStatus": {
          "title": "OrderStatus",
          "description": "Order Status",
          "type": "string",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "example": true,
          "type": "boolean"
        }
      }
    }
- Customer: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Customer",
      "title": "Customer",
      "type": "object",
      "properties": {
        "id": {
          "example": 100000,
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "example": "fehguy",
          "type": "string"
        },
        "address": {
          "description": "",
          "type": "array",
          "items": {
            "id": "Address",
            "title": "Address",
            "type": "object",
            "properties": {
              "street": {
                "example": "437 Lytton",
                "type": "string"
              },
              "city": {
                "example": "Palo Alto",
                "type": "string"
              },
              "state": {
                "example": "CA",
                "type": "string"
              },
              "zip": {
                "example": "94301",
                "type": "string"
              }
            }
          }
        }
      }
    }
- Address: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Address",
      "title": "Address",
      "type": "object",
      "properties": {
        "street": {
          "example": "437 Lytton",
          "type": "string"
        },
        "city": {
          "example": "Palo Alto",
          "type": "string"
        },
        "state": {
          "example": "CA",
          "type": "string"
        },
        "zip": {
          "example": "94301",
          "type": "string"
        }
      }
    }
- Category: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Category",
      "title": "Category",
      "type": "object",
      "properties": {
        "id": {
          "example": 1,
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "example": "Dogs",
          "type": "string"
        }
      }
    }
- User: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "User",
      "title": "User",
      "type": "object",
      "properties": {
        "id": {
          "example": 10,
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "example": "theUser",
          "type": "string"
        },
        "firstName": {
          "example": "John",
          "type": "string"
        },
        "lastName": {
          "example": "James",
          "type": "string"
        },
        "email": {
          "example": "john@email.com",
          "type": "string"
        },
        "password": {
          "example": "12345",
          "type": "string"
        },
        "phone": {
          "example": "12345",
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "example": 1,
          "type": "integer",
          "format": "int32"
        }
      }
    }
- Tag: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Tag",
      "title": "Tag",
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    }
- Pet: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "Pet",
      "title": "Pet",
      "type": "object",
      "properties": {
        "name": {
          "example": "doggie",
          "type": "string"
        },
        "photoUrls": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "example": 10,
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "id": "Category",
          "title": "Category",
          "type": "object",
          "properties": {
            "id": {
              "example": 1,
              "type": "integer",
              "format": "int64"
            },
            "name": {
              "example": "Dogs",
              "type": "string"
            }
          }
        },
        "tags": {
          "description": "",
          "type": "array",
          "items": {
            "id": "Tag",
            "title": "Tag",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "petStatus": {
          "title": "PetStatus",
          "description": "pet status in the store",
          "type": "string",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "required": [
        "name",
        "photoUrls"
      ]
    }
- PetImage: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "id": "PetImage",
      "title": "PetImage",
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
- OrderStatus: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "OrderStatus",
      "description": "Order Status",
      "type": "string",
      "enum": [
        "placed",
        "approved",
        "delivered"
      ]
    }
- PetStatus: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "PetStatus",
      "description": "pet status in the store",
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    }
- status: |
    {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "title": "status",
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    }
securitySchemes:
- api_key:
    type: x-custom
    describedBy:
      headers:
        api_key:
          type: string
          required: true
          displayName: api_key
/pet:
  /findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      queryParameters:
        status:
          description: Status values that need to be considered for filter
          example: available
          default: available
          required: false
          displayName: status
          enum:
          - available
          - pending
          - sold
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "description": "",
                  "type": "array",
                  "items": {
                    "id": "Pet",
                    "title": "Pet",
                    "type": "object",
                    "properties": {
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "id": {
                        "example": 10,
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "id": "Category",
                        "title": "Category",
                        "type": "object",
                        "properties": {
                          "id": {
                            "example": 1,
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "example": "Dogs",
                            "type": "string"
                          }
                        }
                      },
                      "tags": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "id": "Tag",
                          "title": "Tag",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "petStatus": {
                        "title": "PetStatus",
                        "description": "pet status in the store",
                        "type": "string",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ]
                  }
                }
        '400':
          description: Invalid status value
  /findByTags:
    get:
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      queryParameters:
        tags:
          description: Tags to filter by
          type: string
          required: false
          displayName: tags
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "description": "",
                  "type": "array",
                  "items": {
                    "id": "Pet",
                    "title": "Pet",
                    "type": "object",
                    "properties": {
                      "name": {
                        "example": "doggie",
                        "type": "string"
                      },
                      "photoUrls": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "id": {
                        "example": 10,
                        "type": "integer",
                        "format": "int64"
                      },
                      "category": {
                        "id": "Category",
                        "title": "Category",
                        "type": "object",
                        "properties": {
                          "id": {
                            "example": 1,
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "example": "Dogs",
                            "type": "string"
                          }
                        }
                      },
                      "tags": {
                        "description": "",
                        "type": "array",
                        "items": {
                          "id": "Tag",
                          "title": "Tag",
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "format": "int64"
                            },
                            "name": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "petStatus": {
                        "title": "PetStatus",
                        "description": "pet status in the store",
                        "type": "string",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      }
                    },
                    "required": [
                      "name",
                      "photoUrls"
                    ]
                  }
                }
        '400':
          description: Invalid tag value
  /{petId}:
    uriParameters:
      petId:
        description: ID of pet to return
        type: integer
        required: true
        displayName: petId
    /uploadImage:
      uriParameters: {}
      post:
        description: uploads an image
        headers:
          Content-Type:
            required: true
            displayName: Content-Type
            enum:
            - application/octet-stream
        queryParameters:
          additionalMetadata:
            description: Additional Metadata
            type: string
            required: false
            displayName: additionalMetadata
        body:
          application/octet-stream:
            formParameters:
              body:
                type: file
                required: false
                displayName: body
        responses:
          '200':
            description: successful operation
            body:
              application/json:
                schema: |
                  {
                    "id": "PetImage",
                    "title": "PetImage",
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32"
                      },
                      "type": {
                        "type": "string"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
    get:
      securedBy:
      - api_key
      description: Returns a single pet
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "id": "Pet",
                  "title": "Pet",
                  "type": "object",
                  "properties": {
                    "name": {
                      "example": "doggie",
                      "type": "string"
                    },
                    "photoUrls": {
                      "description": "",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "id": {
                      "example": 10,
                      "type": "integer",
                      "format": "int64"
                    },
                    "category": {
                      "id": "Category",
                      "title": "Category",
                      "type": "object",
                      "properties": {
                        "id": {
                          "example": 1,
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "example": "Dogs",
                          "type": "string"
                        }
                      }
                    },
                    "tags": {
                      "description": "",
                      "type": "array",
                      "items": {
                        "id": "Tag",
                        "title": "Tag",
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "format": "int64"
                          },
                          "name": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "petStatus": {
                      "title": "PetStatus",
                      "description": "pet status in the store",
                      "type": "string",
                      "enum": [
                        "available",
                        "pending",
                        "sold"
                      ]
                    }
                  },
                  "required": [
                    "name",
                    "photoUrls"
                  ]
                }
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    post:
      description: Updates a pet in the store with form data
      queryParameters:
        name:
          description: Name of pet that needs to be updated
          type: string
          required: false
          displayName: name
        status:
          description: Status of pet that needs to be updated
          type: string
          required: false
          displayName: status
      responses:
        '405':
          description: Invalid input
    delete:
      description: delete a pet
      headers:
        api_key:
          type: string
          required: false
          displayName: api_key
      responses:
        '400':
          description: Invalid pet value
  put:
    description: Update an existing pet by Id
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        enum:
        - application/x-www-form-urlencoded
    body:
      application/x-www-form-urlencoded:
        formParameters:
          name:
            type: string
            example: doggie
            required: true
            displayName: name
          photoUrls:
            type: string
            required: true
            displayName: photoUrls
          id:
            type: integer
            example: '10'
            required: false
            displayName: id
          category:
            type: string
            required: false
            displayName: category
          tags:
            type: string
            required: false
            displayName: tags
          petStatus:
            description: pet status in the store
            required: false
            displayName: petStatus
            enum:
            - available
            - pending
            - sold
    responses:
      '200':
        description: Successful operation
        body:
          application/json:
            schema: |
              {
                "id": "Pet",
                "title": "Pet",
                "type": "object",
                "properties": {
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "id": "Category",
                    "title": "Category",
                    "type": "object",
                    "properties": {
                      "id": {
                        "example": 1,
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "example": "Dogs",
                        "type": "string"
                      }
                    }
                  },
                  "tags": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "id": "Tag",
                      "title": "Tag",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "petStatus": {
                    "title": "PetStatus",
                    "description": "pet status in the store",
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ]
              }
      '400':
        description: Invalid ID supplied
      '404':
        description: Pet not found
      '405':
        description: Validation exception
  post:
    description: Add a new pet to the store
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        enum:
        - application/x-www-form-urlencoded
    body:
      application/x-www-form-urlencoded:
        formParameters:
          name:
            type: string
            example: doggie
            required: true
            displayName: name
          photoUrls:
            type: string
            required: true
            displayName: photoUrls
          id:
            type: integer
            example: '10'
            required: false
            displayName: id
          category:
            type: string
            required: false
            displayName: category
          tags:
            type: string
            required: false
            displayName: tags
          petStatus:
            description: pet status in the store
            required: false
            displayName: petStatus
            enum:
            - available
            - pending
            - sold
    responses:
      '200':
        description: Successful operation
        body:
          application/json:
            schema: |
              {
                "id": "Pet",
                "title": "Pet",
                "type": "object",
                "properties": {
                  "name": {
                    "example": "doggie",
                    "type": "string"
                  },
                  "photoUrls": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "id": {
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                  },
                  "category": {
                    "id": "Category",
                    "title": "Category",
                    "type": "object",
                    "properties": {
                      "id": {
                        "example": 1,
                        "type": "integer",
                        "format": "int64"
                      },
                      "name": {
                        "example": "Dogs",
                        "type": "string"
                      }
                    }
                  },
                  "tags": {
                    "description": "",
                    "type": "array",
                    "items": {
                      "id": "Tag",
                      "title": "Tag",
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "petStatus": {
                    "title": "PetStatus",
                    "description": "pet status in the store",
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                },
                "required": [
                  "name",
                  "photoUrls"
                ]
              }
      '405':
        description: Invalid input
/user:
  /createWithList:
    post:
      description: Creates list of users with given input array
      headers:
        Content-Type:
          example: application/json
          required: true
          displayName: Content-Type
          enum:
          - application/json
      body:
        application/json:
          schema: |
            {
              "description": "",
              "type": "array",
              "items": {
                "id": "User",
                "title": "User",
                "type": "object",
                "properties": {
                  "id": {
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                  },
                  "username": {
                    "example": "theUser",
                    "type": "string"
                  },
                  "firstName": {
                    "example": "John",
                    "type": "string"
                  },
                  "lastName": {
                    "example": "James",
                    "type": "string"
                  },
                  "email": {
                    "example": "john@email.com",
                    "type": "string"
                  },
                  "password": {
                    "example": "12345",
                    "type": "string"
                  },
                  "phone": {
                    "example": "12345",
                    "type": "string"
                  },
                  "userStatus": {
                    "description": "User Status",
                    "example": 1,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          example: ''
      responses:
        '200':
          description: Successful operation
          body:
            application/json:
              schema: |
                {
                  "id": "User",
                  "title": "User",
                  "type": "object",
                  "properties": {
                    "id": {
                      "example": 10,
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "example": "theUser",
                      "type": "string"
                    },
                    "firstName": {
                      "example": "John",
                      "type": "string"
                    },
                    "lastName": {
                      "example": "James",
                      "type": "string"
                    },
                    "email": {
                      "example": "john@email.com",
                      "type": "string"
                    },
                    "password": {
                      "example": "12345",
                      "type": "string"
                    },
                    "phone": {
                      "example": "12345",
                      "type": "string"
                    },
                    "userStatus": {
                      "description": "User Status",
                      "example": 1,
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
        '0':
          description: successful operation
  /login:
    get:
      description: Logs user into the system
      queryParameters:
        username:
          description: The user name for login
          type: string
          required: false
          displayName: username
        password:
          description: The password for login in clear text
          type: string
          required: false
          displayName: password
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              required: false
            X-Expires-After:
              required: false
          body:
            application/json:
              schema: |
                {
                  "type": "string"
                }
        '400':
          description: Invalid username/password supplied
  /logout:
    get:
      description: Logs out current logged in user session
      responses:
        '200':
          description: successful operation
  /{name}:
    uriParameters:
      name:
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
        required: true
        displayName: name
    get:
      description: Get user by user name
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "id": "User",
                  "title": "User",
                  "type": "object",
                  "properties": {
                    "id": {
                      "example": 10,
                      "type": "integer",
                      "format": "int64"
                    },
                    "username": {
                      "example": "theUser",
                      "type": "string"
                    },
                    "firstName": {
                      "example": "John",
                      "type": "string"
                    },
                    "lastName": {
                      "example": "James",
                      "type": "string"
                    },
                    "email": {
                      "example": "john@email.com",
                      "type": "string"
                    },
                    "password": {
                      "example": "12345",
                      "type": "string"
                    },
                    "phone": {
                      "example": "12345",
                      "type": "string"
                    },
                    "userStatus": {
                      "description": "User Status",
                      "example": 1,
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      description: This can only be done by the logged in user.
      headers:
        Content-Type:
          required: true
          displayName: Content-Type
          enum:
          - application/x-www-form-urlencoded
      body:
        application/x-www-form-urlencoded:
          formParameters:
            id:
              type: integer
              example: '10'
              required: false
              displayName: id
            username:
              type: string
              example: theUser
              required: false
              displayName: username
            firstName:
              type: string
              example: John
              required: false
              displayName: firstName
            lastName:
              type: string
              example: James
              required: false
              displayName: lastName
            email:
              type: string
              example: john@email.com
              required: false
              displayName: email
            password:
              type: string
              example: '12345'
              required: false
              displayName: password
            phone:
              type: string
              example: '12345'
              required: false
              displayName: phone
            userStatus:
              description: User Status
              type: integer
              example: '1'
              required: false
              displayName: userStatus
      responses:
        '200':
          description: successful operation
    delete:
      description: This can only be done by the logged in user.
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  post:
    description: This can only be done by the logged in user.
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        enum:
        - application/x-www-form-urlencoded
    body:
      application/x-www-form-urlencoded:
        formParameters:
          id:
            type: integer
            example: '10'
            required: false
            displayName: id
          username:
            type: string
            example: theUser
            required: false
            displayName: username
          firstName:
            type: string
            example: John
            required: false
            displayName: firstName
          lastName:
            type: string
            example: James
            required: false
            displayName: lastName
          email:
            type: string
            example: john@email.com
            required: false
            displayName: email
          password:
            type: string
            example: '12345'
            required: false
            displayName: password
          phone:
            type: string
            example: '12345'
            required: false
            displayName: phone
          userStatus:
            description: User Status
            type: integer
            example: '1'
            required: false
            displayName: userStatus
    responses:
      '200':
        description: successful operation
        body:
          application/json:
            schema: |
              {
                "id": "User",
                "title": "User",
                "type": "object",
                "properties": {
                  "id": {
                    "example": 10,
                    "type": "integer",
                    "format": "int64"
                  },
                  "username": {
                    "example": "theUser",
                    "type": "string"
                  },
                  "firstName": {
                    "example": "John",
                    "type": "string"
                  },
                  "lastName": {
                    "example": "James",
                    "type": "string"
                  },
                  "email": {
                    "example": "john@email.com",
                    "type": "string"
                  },
                  "password": {
                    "example": "12345",
                    "type": "string"
                  },
                  "phone": {
                    "example": "12345",
                    "type": "string"
                  },
                  "userStatus": {
                    "description": "User Status",
                    "example": 1,
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
/store:
  /inventory:
    get:
      securedBy:
      - api_key
      description: Returns a map of status codes to quantities
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
  /order:
    /{orderId}:
      uriParameters:
        orderId:
          description: ID of order that needs to be fetched
          type: integer
          required: true
          displayName: orderId
      get:
        description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
        responses:
          '200':
            description: successful operation
            body:
              application/json:
                schema: |
                  {
                    "id": "Order",
                    "title": "Order",
                    "type": "object",
                    "properties": {
                      "id": {
                        "example": 10,
                        "type": "integer",
                        "format": "int64"
                      },
                      "petId": {
                        "example": 198772,
                        "type": "integer",
                        "format": "int64"
                      },
                      "quantity": {
                        "example": 7,
                        "type": "integer",
                        "format": "int32"
                      },
                      "shipDate": {
                        "example": "2023-05-31T00:00:00Z",
                        "type": "string",
                        "format": "date-time"
                      },
                      "orderStatus": {
                        "title": "OrderStatus",
                        "description": "Order Status",
                        "type": "string",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "example": true,
                        "type": "boolean"
                      }
                    }
                  }
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
      delete:
        description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        responses:
          '400':
            description: Invalid ID supplied
          '404':
            description: Order not found
    post:
      description: Place a new order in the store
      headers:
        Content-Type:
          example: application/x-www-form-urlencoded
          required: true
          displayName: Content-Type
          enum:
          - application/x-www-form-urlencoded
      body:
        application/x-www-form-urlencoded:
          formParameters:
            id:
              type: integer
              example: '10'
              required: false
              displayName: id
            petId:
              type: integer
              example: '198772'
              required: false
              displayName: petId
            quantity:
              type: integer
              example: '7'
              required: false
              displayName: quantity
            shipDate:
              type: date
              example: 2023-05-31T00:00:00Z
              required: false
              displayName: shipDate
            orderStatus:
              description: Order Status
              example: approved
              default: approved
              required: false
              displayName: orderStatus
              enum:
              - placed
              - approved
              - delivered
            complete:
              type: boolean
              example: 'true'
              required: false
              displayName: complete
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              schema: |
                {
                  "id": "Order",
                  "title": "Order",
                  "type": "object",
                  "properties": {
                    "id": {
                      "example": 10,
                      "type": "integer",
                      "format": "int64"
                    },
                    "petId": {
                      "example": 198772,
                      "type": "integer",
                      "format": "int64"
                    },
                    "quantity": {
                      "example": 7,
                      "type": "integer",
                      "format": "int32"
                    },
                    "shipDate": {
                      "example": "2023-05-31T00:00:00Z",
                      "type": "string",
                      "format": "date-time"
                    },
                    "orderStatus": {
                      "title": "OrderStatus",
                      "description": "Order Status",
                      "type": "string",
                      "enum": [
                        "placed",
                        "approved",
                        "delivered"
                      ]
                    },
                    "complete": {
                      "example": true,
                      "type": "boolean"
                    }
                  }
                }
        '405':
          description: Invalid input
