#%RAML 1.0
title: Swagger Petstore - OpenAPI 3.0
version: 1.0.11
baseUri: https://petstore3.swagger.io/api/v3
baseUriParameters: {}
protocols:
- HTTPS
documentation:
- title: Swagger Petstore - OpenAPI 3.0
  content: |
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.


    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_


    Some useful links:

    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)

    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
securitySchemes:
  api_key:
    type: Pass Through
    describedBy:
      headers:
        api_key:
          required: true
          displayName: api_key
          type: string
securedBy: []
types:
  Order:
    displayName: Order
    type: object
    properties:
      id:
        required: false
        example:
          value: 10
        displayName: id
        type: integer
        format: int64
      petId:
        required: false
        example:
          value: 198772
        displayName: petId
        type: integer
        format: int64
      quantity:
        required: false
        example:
          value: 7
        displayName: quantity
        type: integer
        format: int32
      shipDate:
        required: false
        example:
          value: 2023-05-31T00:00:00Z
        displayName: shipDate
        type: datetime
      orderStatus:
        required: false
        default: approved
        displayName: orderStatus
        description: Order Status
        type: string
        enum:
        - placed
        - approved
        - delivered
      complete:
        required: false
        example:
          value: true
        displayName: complete
        type: boolean
  Customer:
    displayName: Customer
    type: object
    properties:
      id:
        required: false
        example:
          value: 100000
        displayName: id
        type: integer
        format: int64
      username:
        required: false
        example:
          value: fehguy
        displayName: username
        type: string
      address:
        required: false
        displayName: address
        type: array
        items:
          type: Address
  Address:
    displayName: Address
    type: object
    properties:
      street:
        required: false
        example:
          value: 437 Lytton
        displayName: street
        type: string
      city:
        required: false
        example:
          value: Palo Alto
        displayName: city
        type: string
      state:
        required: false
        example:
          value: CA
        displayName: state
        type: string
      zip:
        required: false
        example:
          value: '94301'
        displayName: zip
        type: string
  Category:
    displayName: Category
    type: object
    properties:
      id:
        required: false
        example:
          value: 1
        displayName: id
        type: integer
        format: int64
      name:
        required: false
        example:
          value: Dogs
        displayName: name
        type: string
  User:
    displayName: User
    type: object
    properties:
      id:
        required: false
        example:
          value: 10
        displayName: id
        type: integer
        format: int64
      username:
        required: false
        example:
          value: theUser
        displayName: username
        type: string
      firstName:
        required: false
        example:
          value: John
        displayName: firstName
        type: string
      lastName:
        required: false
        example:
          value: James
        displayName: lastName
        type: string
      email:
        required: false
        example:
          value: john@email.com
        displayName: email
        type: string
      password:
        required: false
        example:
          value: '12345'
        displayName: password
        type: string
      phone:
        required: false
        example:
          value: '12345'
        displayName: phone
        type: string
      userStatus:
        required: false
        example:
          value: 1
        displayName: userStatus
        description: User Status
        type: integer
        format: int32
  Tag:
    displayName: Tag
    type: object
    properties:
      id:
        required: false
        displayName: id
        type: integer
        format: int64
      name:
        required: false
        displayName: name
        type: string
  Pet:
    displayName: Pet
    type: object
    properties:
      name:
        required: true
        example:
          value: doggie
        displayName: name
        type: string
      photoUrls:
        required: true
        displayName: photoUrls
        type: array
        items:
          type: string
      id:
        required: false
        example:
          value: 10
        displayName: id
        type: integer
        format: int64
      category:
        required: false
        displayName: category
        type: Category
      tags:
        required: false
        displayName: tags
        type: array
        items:
          type: Tag
      petStatus:
        required: false
        displayName: petStatus
        description: pet status in the store
        type: string
        enum:
        - available
        - pending
        - sold
  PetImage:
    displayName: PetImage
    type: object
    properties:
      code:
        required: false
        displayName: code
        type: integer
        format: int32
      type:
        required: false
        displayName: type
        type: string
      message:
        required: false
        displayName: message
        type: string
/pet:
  put:
    displayName: updatePet
    description: Update an existing pet by Id
    body:
      multipart/form-data:
        type: object
        properties:
          name:
            required: true
            example:
              value: doggie
            displayName: name
            type: string
          photoUrls:
            required: true
            displayName: photoUrls
            type: array
            items:
              type: string
          id:
            required: false
            example:
              value: 10
            displayName: id
            type: integer
            format: int64
          category:
            required: false
            displayName: category
            type: Category
          tags:
            required: false
            displayName: tags
            type: array
            items:
              type: Tag
          petStatus:
            required: false
            displayName: petStatus
            description: pet status in the store
            type: string
            enum:
            - available
            - pending
            - sold
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        type: string
        enum:
        - application/x-www-form-urlencoded
    responses:
      '200':
        description: Successful operation
        body:
          application/json:
            displayName: response200
            description: ''
            type: Pet
      '400':
        description: Invalid ID supplied
        body: {}
      '404':
        description: Pet not found
        body: {}
      '405':
        description: Validation exception
        body: {}
  post:
    displayName: addPet
    description: Add a new pet to the store
    body:
      multipart/form-data:
        type: object
        properties:
          name:
            required: true
            example:
              value: doggie
            displayName: name
            type: string
          photoUrls:
            required: true
            displayName: photoUrls
            type: array
            items:
              type: string
          id:
            required: false
            example:
              value: 10
            displayName: id
            type: integer
            format: int64
          category:
            required: false
            displayName: category
            type: Category
          tags:
            required: false
            displayName: tags
            type: array
            items:
              type: Tag
          petStatus:
            required: false
            displayName: petStatus
            description: pet status in the store
            type: string
            enum:
            - available
            - pending
            - sold
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        type: string
        enum:
        - application/x-www-form-urlencoded
    responses:
      '200':
        description: Successful operation
        body:
          application/json:
            displayName: response200
            description: ''
            type: Pet
      '405':
        description: Invalid input
        body: {}
  /findByStatus:
    get:
      displayName: findPetsByStatus
      description: Multiple status values can be provided with comma separated strings
      queryParameters:
        status:
          required: false
          default: available
          example:
            value: available
          displayName: status
          description: Status values that need to be considered for filter
          type: string
          enum:
          - available
          - pending
          - sold
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: array
              items:
                type: Pet
        '400':
          description: Invalid status value
          body: {}
  /findByTags:
    get:
      displayName: findPetsByTags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      queryParameters:
        tags:
          required: false
          displayName: tags
          description: Tags to filter by
          type: array
          items:
            type: string
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: array
              items:
                type: Pet
        '400':
          description: Invalid tag value
          body: {}
  /{petId}:
    uriParameters:
      petId:
        required: true
        displayName: petId
        description: ID of pet to return
        type: integer
        format: int64
    get:
      displayName: getPetById
      description: Returns a single pet
      securedBy:
      - api_key
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: Pet
        '400':
          description: Invalid ID supplied
          body: {}
        '404':
          description: Pet not found
          body: {}
    post:
      displayName: updatePetWithForm
      description: Updates a pet in the store with form data
      queryParameters:
        name:
          required: false
          displayName: name
          description: Name of pet that needs to be updated
          type: string
        status:
          required: false
          displayName: status
          description: Status of pet that needs to be updated
          type: string
      responses:
        '405':
          description: Invalid input
          body: {}
    delete:
      displayName: deletePet
      description: delete a pet
      headers:
        api_key:
          required: false
          displayName: api_key
          type: string
      responses:
        '400':
          description: Invalid pet value
          body: {}
    /uploadImage:
      post:
        displayName: uploadFile
        description: uploads an image
        body:
          multipart/form-data:
            type: object
            properties:
              body:
                required: false
                displayName: body
                type: file
        queryParameters:
          additionalMetadata:
            required: false
            displayName: additionalMetadata
            description: Additional Metadata
            type: string
        headers:
          Content-Type:
            required: true
            displayName: Content-Type
            type: string
            enum:
            - application/octet-stream
        responses:
          '200':
            description: successful operation
            body:
              application/json:
                displayName: response200
                description: ''
                type: PetImage
/user:
  post:
    displayName: createUser
    description: This can only be done by the logged in user.
    body:
      multipart/form-data:
        type: object
        properties:
          id:
            required: false
            example:
              value: 10
            displayName: id
            type: integer
            format: int64
          username:
            required: false
            example:
              value: theUser
            displayName: username
            type: string
          firstName:
            required: false
            example:
              value: John
            displayName: firstName
            type: string
          lastName:
            required: false
            example:
              value: James
            displayName: lastName
            type: string
          email:
            required: false
            example:
              value: john@email.com
            displayName: email
            type: string
          password:
            required: false
            example:
              value: '12345'
            displayName: password
            type: string
          phone:
            required: false
            example:
              value: '12345'
            displayName: phone
            type: string
          userStatus:
            required: false
            example:
              value: 1
            displayName: userStatus
            description: User Status
            type: integer
            format: int32
    headers:
      Content-Type:
        required: true
        displayName: Content-Type
        type: string
        enum:
        - application/x-www-form-urlencoded
    responses:
      '200':
        description: successful operation
        body:
          application/json:
            displayName: response200
            description: ''
            type: User
  /createWithList:
    post:
      displayName: createUsersWithListInput
      description: Creates list of users with given input array
      body:
        application/json:
          displayName: body
          type: array
          items:
            type: User
      headers:
        Content-Type:
          required: true
          example:
            value: application/json
          displayName: Content-Type
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: Successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: User
  /login:
    get:
      displayName: loginUser
      description: Logs user into the system
      queryParameters:
        username:
          required: false
          displayName: username
          description: The user name for login
          type: string
        password:
          required: false
          displayName: password
          description: The password for login in clear text
          type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              displayName: X-Rate-Limit
              description: calls per hour allowed by the user
              type: string
            X-Expires-After:
              displayName: X-Expires-After
              description: date in UTC when token expires
              type: string
          body:
            application/json:
              displayName: response200
              description: ''
              type: string
        '400':
          description: Invalid username/password supplied
          body: {}
  /logout:
    get:
      displayName: logoutUser
      description: Logs out current logged in user session
      responses:
        '200':
          description: successful operation
          body: {}
  /{name}:
    uriParameters:
      name:
        required: true
        displayName: name
        description: The name that needs to be fetched. Use user1 for testing.
        type: string
    get:
      displayName: getUserByName
      description: Get user by user name
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: User
        '400':
          description: Invalid username supplied
          body: {}
        '404':
          description: User not found
          body: {}
    put:
      displayName: updateUser
      description: This can only be done by the logged in user.
      body:
        multipart/form-data:
          type: object
          properties:
            id:
              required: false
              example:
                value: 10
              displayName: id
              type: integer
              format: int64
            username:
              required: false
              example:
                value: theUser
              displayName: username
              type: string
            firstName:
              required: false
              example:
                value: John
              displayName: firstName
              type: string
            lastName:
              required: false
              example:
                value: James
              displayName: lastName
              type: string
            email:
              required: false
              example:
                value: john@email.com
              displayName: email
              type: string
            password:
              required: false
              example:
                value: '12345'
              displayName: password
              type: string
            phone:
              required: false
              example:
                value: '12345'
              displayName: phone
              type: string
            userStatus:
              required: false
              example:
                value: 1
              displayName: userStatus
              description: User Status
              type: integer
              format: int32
      headers:
        Content-Type:
          required: true
          displayName: Content-Type
          type: string
          enum:
          - application/x-www-form-urlencoded
      responses:
        '200':
          description: successful operation
          body: {}
    delete:
      displayName: deleteUser
      description: This can only be done by the logged in user.
      responses:
        '400':
          description: Invalid username supplied
          body: {}
        '404':
          description: User not found
          body: {}
/store:
  /inventory:
    get:
      displayName: getInventory
      description: Returns a map of status codes to quantities
      securedBy:
      - api_key
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: object
              additionalProperties: true
              properties:
                //:
                  type: integer
  /order:
    post:
      displayName: placeOrder
      description: Place a new order in the store
      body:
        multipart/form-data:
          type: object
          properties:
            id:
              required: false
              example:
                value: 10
              displayName: id
              type: integer
              format: int64
            petId:
              required: false
              example:
                value: 198772
              displayName: petId
              type: integer
              format: int64
            quantity:
              required: false
              example:
                value: 7
              displayName: quantity
              type: integer
              format: int32
            shipDate:
              required: false
              example:
                value: 2023-05-31T00:00:00Z
              displayName: shipDate
              type: datetime
            orderStatus:
              required: false
              default: approved
              example:
                value: approved
              displayName: orderStatus
              description: Order Status
              type: string
              enum:
              - placed
              - approved
              - delivered
            complete:
              required: false
              example:
                value: true
              displayName: complete
              type: boolean
      headers:
        Content-Type:
          required: true
          example:
            value: application/x-www-form-urlencoded
          displayName: Content-Type
          type: string
          enum:
          - application/x-www-form-urlencoded
      responses:
        '200':
          description: successful operation
          body:
            application/json:
              displayName: response200
              description: ''
              type: Order
        '405':
          description: Invalid input
          body: {}
    /{orderId}:
      uriParameters:
        orderId:
          required: true
          displayName: orderId
          description: ID of order that needs to be fetched
          type: integer
          format: int64
      get:
        displayName: getOrderById
        description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
        responses:
          '200':
            description: successful operation
            body:
              application/json:
                displayName: response200
                description: ''
                type: Order
          '400':
            description: Invalid ID supplied
            body: {}
          '404':
            description: Order not found
            body: {}
      delete:
        displayName: deleteOrder
        description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
        responses:
          '400':
            description: Invalid ID supplied
            body: {}
          '404':
            description: Order not found
            body: {}
